FORMAT: 1A
HOST: https://descartes-api.quantumstack.xyz/

# Descartes

I think, therefore I am. [Open-source](https://github.com/quantumstack/descartes), educational web application.

<div align="right"><sup>
  made with ❤️ in Pittsburgh, PA by <a href="https://quantumstack.xyz">QuantumStack</a>
</sup></div>

## Authentication Collection [/auth]

This API uses OAuth v2 Bearer Token / Personal Access Token for its authentication.

### Login [POST /auth/login]

Login to an existing user account. Note that the responses for an incorrect email or incorrect password are identical.

+ Request 200 Valid Login (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password"
            }
            
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "You have successfully logged in.",
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI0LCJpYXQiOjE1NTg2MzI2NTN9.gpRK6QPQpPkHJ7iOjFuL7mvaghJFdQJNnCRuDimlaKM",
            "user": {
                "userId": 24,
                "email": "aditya@example.com",
                "fullName": "Aditya Pillai"
            }
        }

+ Request 400 Incorrect Email (application/json)
    + Body

            {
                "email": "nonexistent-user@example.com",
                "password": "example_password"
            }
            

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "incorrect-credentials",
            "message": "Incorrect email or password."
        }

+ Request 400 Incorrect Password (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "incorrect_password"
            }
            

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "incorrect-credentials",
            "message": "Incorrect email or password."
        }

+ Request 400 Unverified Email (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "unverified-email",
            "message": "Please verify your email address before logging in."
        }

### Signup [POST /auth/signup]

Create a new user.

+ Request 200 Valid Signup (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "fullName": "Aditya Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "You have successfully created an account."
        }
    
+ Request 400 Invalid reCAPTCHA Token (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "fullName": "Aditya Pillai",
                "g-recaptcha-response": "invalid-recaptcha-token"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-recaptcha",
            "message": "The reCAPTCHA verification failed, please try again."
        }

+ Request 409 User Account Already Exists (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "fullName": "Aditya Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
        
+ Response 409 (application/json; charset=utf-)

        {
            "success": false,
            "error": "user-already-exists",
            "message": "A user with this email address already exists."
        }


+ Request 400 Password Too Short (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "short",
                "fullName": "Aditya Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "password-too-short",
            "message": "Please provide a password of length 8+."
        }
        
+ Request 400 Email Not Provided (application/json)
    + Body

            {
                "password": "example_password",
                "fullName": "Aditya Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
        
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-email",
            "message": "Please provide your email.",

        }

+ Request 400 Password Not Provided (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "fullName": "Aditya Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-password",
            "message": "Please provide a password"
        }

+ Request 400 Full Name Not Provided (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "g-recaptcha-response": "recaptcha-token"
            }
            

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-fullname",
            "message": "Please provide your full name."
        }

### Email Verification [POST /auth/verify]

Verify an email address given a confirmation code and email address. Note that the responses for an incorrect email or confirmation ID are both the same.

+ Request 200 Valid Email Confirmation (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }
            
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "Your email has been successfully verified."
        }

+ Request 400 Invalid Email Confirmation (application/json)
    + Body

            {
                "email": "invalid-email@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-email-confirmation",
            "message": "Your email has not been verified."
        }

+ Request 400 Invalid Confirmation ID (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-email-confirmation",
            "message": "Your email has not been verified."
        }

### Resend Email Confirmation [POST /auth/resend]

Request to resend another email confirmation. 


+ Request 200 Valid Email Confirmation Resend (application/json)
    + Body

            {
                "email": "aditya@example.com"
            }
        
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "Another confirmation email has been successfully sent."
        }

+ Request 400 Requesting Verification Too Quickly (application/json)
    + Body

            {
                "email": "aditya@example.com"
            }
        
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "email-verification-too-quickly",
            "message": "You have already requested an email verification recently."
        }


+ Request 400 Email Already Verified (application/json)
    + Body

            {
                "email": "already-verified@example.com"
            }
        
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "email-already-verified",
            "message": "This email has already been confirmed."
        }
        
        
+ Request 400 Invalid Email Confirmation Resend (application/json)

    + Body

            {
                "email": "non-existent@example.com"
            }
        

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "non-existent-email",
            "message": "An account with this email address does not exist, try signing up first."
        }

## General Collection [/]

### Create Course [POST /create]

Want to create a course. Redirect to Stripe for Checkout session.

+ Request (application/json)
    + Headers
        
        Authentication: Bearer JWT

    + Body

        {
            "name": "15-122: Fall 2019",
            "description": "**Very interesting and fun**",
            "plan": "plan id (std or lit)",
            "price": 25
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "id": "stripe checkout session id"
        }

### Enroll In Course [POST /enroll]

Join a course a student.

+ Request (application/json)
    + Headers

        Authentication: Bearer JWT

    + Body

        {
            "code": "course code given to students"
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "id": "descartes course id"
        }

### Dashboard Overview [GET /overview]

Get details about a user's courses.

+ Request (application/json)
    + Headers

        Authentication: Bearer JWT
            
+ Response 200 (application/json; charset=utf-8)

        {
            "user": {
                "name": "Aditya Pillai",
                "email": "aditya@example.com"
            },
            "instructorCourses": [
                {
                    "id": "379",
                    "role": "admin",
                    "name": "15-112: Fall 2019",
                    "instructors": 10,
                    "students": 500,
                    "activities": 5,
                    "polls": 10,
                    "oh": true,
                    "expired": false
                }
            ],
            "studentCourses": [
                {
                    "id": "761",
                    "role": "student",
                    "name": "15-122: Summer 2019",
                    "head": "Mr. Head Instructor",
                    "grade": 100,
                    "activities": 5,
                    "polls": 10,
                    "oh": true,
                    "expired": false
                }
            ]
        }

### Account Overview [GET /account]

Get just the details about a user.

+ Request (application/json)
    + Headers

        Authentication: Bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
            "user": {
                "name": "Aditya Pillai",
                "email": "aditya@example.com"
            },
            "payments": [
                {
                    "name": "15-122: Fall 2019",
                    "plan": "std",
                    "date": 1558849250238
                }
            ]
        }

### Change Account Details [POST /account]

Modify a user's name and/or password.

+ Request (application/json)
    + Headers (application/json)

        Authentication: Bearer JWT

    + Body

        {
            "name": "Ashwin Srinivasan",
            "old_password": "example_password",
            "password": "super_secure"
        }

+ Response 200 (text/plain; charset=utf-8)

        User details changed.
